Parameters:
  EnvironmentName:
    Type: String
    Default: MinecraftServer

  Ipv4Cidr:
    Type: String
    Description: First and Second octet of VPC.
    # e.g.) xxx.xxx (192.168 / 172.16-31 / 10.0-255)
    Default: 192.168

Mappings:
  CidrBlocks:
    Vpc:
      Ipv4Cidr: .0.0/16
    Subnet1:
      Ipv4Cidr: .0.0/24
      Ipv6Cidr: 00::/64
    Subnet2:
      Ipv4Cidr: .1.0/24
      Ipv6Cidr: 01::/64

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Fn::Sub:
          - ${Ipv4Cidr}${Block}
          - Block: !FindInMap [CidrBlocks, Vpc, Ipv4Cidr]
      EnableDnsHostnames: false
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  Ipv6VPCCidrBlock:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      VpcId: !Ref VPC
      AmazonProvidedIpv6CidrBlock: true

  # Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  AttachIntenetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Route/RouteTable
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  RouteV4:
    Type: AWS::EC2::Route
    DependsOn:
      - AttachIntenetGateway
    Properties:
      RouteTableId: !Ref RouteTable
      GatewayId: !Ref InternetGateway
      DestinationCidrBlock: 0.0.0.0/0

  RouteV6:
    Type: AWS::EC2::Route
    DependsOn:
      - AttachIntenetGateway
    Properties:
      RouteTableId: !Ref RouteTable
      GatewayId: !Ref InternetGateway
      DestinationIpv6CidrBlock: ::/0

  # Subnet
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn:
      - Ipv6VPCCidrBlock
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, {Fn::GetAZs: !Ref AWS::Region}]
      CidrBlock:
        Fn::Sub:
          - ${Ipv4Cidr}${Block}
          - Block: !FindInMap [CidrBlocks, Subnet1, Ipv4Cidr]
      Ipv6CidrBlock:
        Fn::Sub:
          - ${Ipv6Cidr}${Block}
          - Ipv6Cidr: !Select [0, !Split ['00::/', !Select [0, !GetAtt VPC.Ipv6CidrBlocks]]]
            Block: !FindInMap [CidrBlocks, Subnet1, Ipv6Cidr]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub PublicSunet1 for ${EnvironmentName}

  AssociatePublicSubnet1WithRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn:
      - Ipv6VPCCidrBlock
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, {Fn::GetAZs: !Ref AWS::Region}]
      CidrBlock:
        Fn::Sub:
          - ${Ipv4Cidr}${Block}
          - Block: !FindInMap [CidrBlocks, Subnet2, Ipv4Cidr]
      Ipv6CidrBlock:
        Fn::Sub:
          - ${Ipv6Cidr}${Block}
          - Ipv6Cidr: !Select [0, !Split ['00::/', !Select [0, !GetAtt VPC.Ipv6CidrBlocks]]]
            Block: !FindInMap [CidrBlocks, Subnet2, Ipv6Cidr]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub PublicSunet2 for ${EnvironmentName}

  AssociatePublicSubnet2WithRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref PublicSubnet2
